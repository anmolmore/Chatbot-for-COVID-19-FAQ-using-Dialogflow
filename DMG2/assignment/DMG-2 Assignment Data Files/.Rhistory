car::vif(model)
model <- lm.ridge(Employed~., data=longley, lambda=seq(0,0.1,0.01))
summary(model)
car::vif(model)
model <- lm.ridge(Employed~., data=longley, lambda=seq(0,0.1,0.001))
summary(model)
names(model)
summary(model)
matplot(model$lambda, t(model$coef), type="l",xlab=expression(lambda), ylab=expression(hat(beta)))abline(h=0, lwd=2)
matplot(model$lambda, t(model$coef), type="l",xlab=expression(lambda), ylab=expression(hat(beta)))abline(h=0, lwd=2)
matplot(model$lambda, t(model$coef), type="l",xlab=expression(lambda), ylab=expression(hat(beta)))
abline(h=0, lwd=2)
abline(h=0, lwd=2)
matplot(model$lambda, t(model$coef), type="l",xlab=expression(lambda), ylab=expression(hat(beta)))
summar(model)
summary(model)
model$GCV
summary(model)
model$kHKB
model$kLW
min(model$GCV)
which(min(model$GCV))
which.min(model$GCV)
summary(model)
model$coef[,model$lambda==0.03]
library(leaps)
regall = regsubsets(Employed~., data=longely, nvmax=5)
coef(regall, 5)
summary(regall)
regall = regsubsets(Employed~., data=longely, nvmax=5)
names(regall)
surgery <- read.csv('data/surgery.csv')
model <- lm(Life ~ ., data=tool)
summary(model)
View(surgery)
surgery <- read.csv('data/surgery.csv')
surgery <- read.csv('data/surgery.csv')
model <- lm(Yi ~ ., data=surgery)
summary(model)
model <- glm(Yi ~ ., data=surgery, family=binomial)
summary(model)
anova(model)
predict(model, type="response")
model <- glm(Yi ~ Age, data=surgery, family=binomial)
summary(model)
anova(model)
predict(model, type="response")
pred <- predict(model, type="response")
accuracy(pred, surgery$Yi)
surgery <- read.csv('data/numClaims.csv')
View(surgery)
model <- glm(numClaims ~ numveh + age, data=surgery, family=poisson)
model <- glm(numclaims ~ numveh + age, data=surgery, family=poisson)
summary(model)
e^(0.086121)
exp^0.086121
exp^(0.086121)
exp()
exp
exp(0.086121)
plot(model)
plot(model)
library(AER)
install.packages("AER")
library(AER)
ornst <- read.csv('data/ornst.csv)
ornst <- read.csv('data/ornst.csv')
ornst <- read.csv('data/ornst.csv')
View(ornst)
model <- glm(ornst$Interlcks ~ ornst$Assets + ornst$Sector + ornst$Nation, family=poisson)
summary(model)
dispersiontest(model,trafo = 1)
plot(ornst$Interlcks)
hist(ornst$Interlcks)
model <- glm.nb(ornst$Interlcks ~ ornst$Assets + ornst$Sector + ornst$Nation)
hist(ornst$Interlcks)
summary(model)
dispersiontest(model,trafo = 1)
read.csv()
library(yaImpute)
cars <- mtcars
View(cars)
model <- lm(mpg ~ disp + hp + wt + qsec)
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
#carry linear regression and check summary and anova
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
plot(x=cars$disp, y=cars$mpg)
vif(model)
library(MASS)
library(leaps)
vif(model)
vif(model)
car::vif(model)
car::vif(model)
cor(model)
cor(cars)
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0,1,0.1))
summary(model)
summary(ridge.model)
ridge.model$kLW
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.1,0.5,0.001))
summary(ridge.model)
ridge.model$kLW
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
summary(ridge.model)
ridge.model$kLW
anova(ridge.model)
summary(ridge.model)
ridge.model$kLW
plot(ridge.model, lambda = seq(0,0.1,0.001)))
plot(ridge.model, lambda = seq(0,0.1,0.001))
wildcat <- read.csv('wildcat.csv')
View(wildcat)
wildcat <- read.csv('wildcat.csv', na.strings = c('--'))
#plot histogram for Workforce
hist(wildcat$Workforce)
#carry linear regression and check summary and anova
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
#carry linear regression and check summary and anova
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
#plotting each of the scatter plots separately
plot(x=cars$disp, y=cars$mpg, xlab ="disp", ylab = "mpg" )
#use mtcars dataset directly
describe(mtcars)
View(mtcars)
View(mtcars)
#plotting each of the scatter plots separately
plot(x=cars$disp, y=cars$mpg, xlab ="disp", ylab = "mpg" )
plot(x=cars$hp, y=cars$mpg, xlab ="hp", ylab = "mpg" )
plot(x=cars$wt, y=cars$mpg, xlab ="wt", ylab = "mpg" )
plot(x=cars$qsec, y=cars$mpg, xlab ="qsec", ylab = "mpg" )
car::vif(model)
#check for correlation between four regressors
cor(cars)
cat('check of vif values')
car::vif(model)
cat('check for correlation between four regressors')
cor(cars)
cat('check of vif values')
car::vif(model)
cat('\ncheck for correlation between four regressors')
cor(cars)
cat('check of vif values\n')
car::vif(model)
cat('\ncheck for correlation between four regressors\n')
cor(cars)
AIC(model)
cat('check of vif values\n')
car::vif(model)
cat('\ncheck for correlation between four regressors\n')
cor(cars)
cat('\ncheck further using AIC and BIC of model\n')
AIC(model)
BIC(model)
plot(ridge.model, lambda = seq(0,1,0.001))
plot(ridge.model, lambda = seq(0,1,0.001), xlab = 'Lambda')
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
summary(ridge.model)
summary(ridge.model)
ridge.model$kHKB
ridge.model$GCV
min(ridge.model$GCV)
which.min(ridge.model$GCV)
ridge.model$kLW
coef(ridge.model, lambda=0.47)
residuals(ridge.model)
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.47)
AIC(ridge.model)
AIC(ridge.model)
anova(ridge.model)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.0001))
names(ridge.model)
print(ridge.model$kLW)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$kLW)
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.47)
plot(ridge.model, lambda = seq(0,1,0.001))
ridge.model$kHKB
min(ridge.model$GCV)
which.min(ridge.model$GCV)
ridge.model$kLW
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.23)
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.46)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$kLW)
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.23)
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars), lambda=0.46)
#using lambda value from kHKB method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$kLW)
#using lambda value from kHKB method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
library(MASS)
library(leaps)
#use mtcars dataset directly
cars <- mtcars
#carry linear regression and check summary and anova
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
#plotting each of the scatter plots separately
plot(x=cars$disp, y=cars$mpg, xlab ="disp", ylab = "mpg" )
plot(x=cars$hp, y=cars$mpg, xlab ="hp", ylab = "mpg" )
plot(x=cars$wt, y=cars$mpg, xlab ="wt", ylab = "mpg" )
plot(x=cars$qsec, y=cars$mpg, xlab ="qsec", ylab = "mpg" )
cat('check of vif values\n')
car::vif(model)
cat('\ncheck for correlation between four regressors\n')
cor(cars)
cat('\ncheck further using AIC and BIC of model\n')
AIC(model)
BIC(model)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
plot(ridge.model, lambda = seq(0,1,0.001))
ridge.model$kHKB
min(ridge.model$GCV)
which.min(ridge.model$GCV)
ridge.model$kLW
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#using lambda value from GCV method, we get coefficients as
min(coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23)))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#using lambda value from GCV method, we get coefficients as
min(coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23)))
#using lambda value from kLW method, we get coefficients as
min(coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46)))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
print(ridge.model$GCV)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
library(MASS)
library(leaps)
#use mtcars dataset directly
cars <- mtcars
#carry linear regression and check summary and anova
model <- lm(mpg ~ disp + hp + wt + qsec, data=cars)
summary(model)
anova(model)
#plotting each of the scatter plots separately
plot(x=cars$disp, y=cars$mpg, xlab ="disp", ylab = "mpg" )
plot(x=cars$hp, y=cars$mpg, xlab ="hp", ylab = "mpg" )
plot(x=cars$wt, y=cars$mpg, xlab ="wt", ylab = "mpg" )
plot(x=cars$qsec, y=cars$mpg, xlab ="qsec", ylab = "mpg" )
cat('check of vif values\n')
car::vif(model)
cat('\ncheck for correlation between four regressors\n')
cor(cars)
cat('\ncheck further using AIC and BIC of model\n')
AIC(model)
BIC(model)
#ridge model with lambda values from 0.01, to 1
ridge.model <- lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda = seq(0.01,1,0.001))
names(ridge.model)
#using lambda value from GCV method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.23))
#using lambda value from kLW method, we get coefficients as
coef(lm.ridge(mpg ~ disp + hp + wt + qsec, data=cars, lambda=0.46))
plot(ridge.model, lambda = seq(0,1,0.001))
ridge.model$kHKB
min(ridge.model$GCV)
which.min(ridge.model$GCV)
ridge.model$kLW
wildcat <- read.csv('wildcat.csv', na.strings = c('--'))
wildcat$Workforce <- ln(wildcat$Workforce)
ln(3)
log(3)
wildcat$Workforce <- log(wildcat$Workforce)
#transfor workforce to log
wildcat$Workforce <- log(wildcat$Workforce)
lm.model <- lm(wildcat$Wildcat.strikes~.)
lm.model <- lm(Wildcat.strikes~., data = wildcat)
summary(lm.model)
wildcat.union.data <- wildcat$Union == 1
hist(wildcat$Wildcat.strikes)
hist(wildcat$Union == 0)
wildcat[wildcat$Union == 0]
wildcat[wildcat$Union = 0]
wildcat(wildcat$Union = 0)
wildcat[wildcat$Union = 0]
wildcat[wildcat$Union == 0]
ifelse(wildcat$Union > 0)
wildcat$Union == 0;
#hist plot of wildcat strikes
wildcat$Union == 0
#hist plot of wildcat strikes
wildcat[wildcat$Union == 0]
#hist plot of wildcat strikes
wildcat[Union == 0]
#hist plot of wildcat strikes
wildcat[Wildcat$Union == 0]
#hist plot of wildcat strikes
wildcat[Wildcat$Union == 0]
#hist plot of wildcat strikes
wildcat[c(Wildcat$Union == 0)]
#hist plot of wildcat strikes
wildcat.index[Wildcat$Union == 0]
index(wildcat$Union == 0)
wildcat$Union == 0;
wildcat$wildcat$Union == 0;
temp <- wildcat$wildcat$Union == 0;
wildcat$wildcat$Union == 0;
wildcat$Union == 0;
wildcat$Union == 1;
wildcat[[wildcat$Union == 1]];
wildcat.union.data <- subset(wildcat, union > 0)
wildcat.union.data <- subset(wildcat, union == 1)
wildcat.union.data <- subset(wildcat, wildcat$union == 1)
View(wildcat.union.data)
wildcat.union.data <- subset(wildcat, wildcat$Union == 1)
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~., data = wildcat.union.data)
summary(lm.model)
lm.model <- lm(Wildcat.strikes~., data = wildcat.union.data)
summary(lm.model)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~., data = wildcat.union.data)
summary(lm.model)
lm.model <- lm(Wildcat.strikes~., data = wildcat.no.union.data)
View(wildcat.union.data)
View(wildcat.no.union.data)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce+, data = wildcat.union.data)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce+, data = wildcat.union.data)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
#seprate two kinds of data
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(lm.model)
lm.model <- lm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data)
summary(lm.model)
lm.model <- lm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data)
summary(lm.model)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
#seprate two kinds of data
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(lm.model)
nonunionized.model <- poisson(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data)
nonunionized.model <- glm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data, family=poisson)
nonunionized.model <- glm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data, family=poisson)
summary(nonunionized.model)
wildcat <- read.csv('wildcat.csv', na.strings = c('--'))
#plot histogram for Workforce
hist(wildcat$Workforce)
#transfor workforce to log
wildcat$Workforce <- log(wildcat$Workforce)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
#seprate two kinds of data
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(lm.model)
#run linear regression for no union data
lm.model <- lm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data)
summary(lm.model)
nonunionized.model <- glm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data, family=poisson)
summary(nonunionized.model)
unionized.model <- glm(Wildcat.strikes~Rotate+Workforce, data = wildcat.union.data, family=poisson)
summary(nonunionized.model)
#negative binomial model
unionized.model.nb <- glm.nb(Wildcat.strikes~Rotate+Workforce, data = wildcat.union.data)
unionized.model <- glm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data, family=poisson)
summary(nonunionized.model)
unionized.model <- glm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data, family=poisson)
summary(unionized.model)
#negative binomial model
unionized.model.nb <- glm.nb(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
library(MASS)
library(MASS)
library(AER)
#negative binomial model
unionized.model.nb <- glm.nb(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(unionized.model.nb)
unionized.model <- glm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data, family=poisson)
summary(unionized.model)
checkResiduals(unionized.model)
stm::checkResiduals(unionized.model)
hist(wildcat.union.data$Wildcat.strikes)
library(MASS)
library(AER)
wildcat <- read.csv('wildcat.csv', na.strings = c('--'))
#plot histogram for Workforce
hist(wildcat$Workforce)
#transfor workforce to log
wildcat$Workforce <- log(wildcat$Workforce)
#hist plot of wildcat strikes
hist(wildcat$Wildcat.strikes)
#seprate two kinds of data
wildcat.union.data <- subset(wildcat, Union == 1)
wildcat.no.union.data <- subset(wildcat, Union == 0)
lm.model <- lm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(lm.model)
#run linear regression for no union data
lm.model <- lm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data)
summary(lm.model)
nonunionized.model <- glm(Wildcat.strikes~Rotate+Workforce, data = wildcat.no.union.data, family=poisson)
summary(nonunionized.model)
unionized.model <- glm(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data, family=poisson)
summary(unionized.model)
hist(wildcat.union.data$Wildcat.strikes)
#look for package to check dispersion
#stm::checkResiduals(unionized.model)
#negative binomial model
unionized.model.nb <- glm.nb(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(unionized.model.nb)
anova(unionized.model.nb)
#negative binomial model
unionized.model.nb <- glm.nb(Wildcat.strikes~Grievances+Rotate+Workforce, data = wildcat.union.data)
summary(unionized.model.nb)
anova(unionized.model.nb)
#plot histogram for Workforce
hist(wildcat$Workforce)
hist(log(wildcat$Workforce))
setwd("~/OneDrive - Indian School of Business/Github/ISB-Term3/DMG2/assignment/DMG-2 Assignment Data Files")
data <- read.csv('DMG-2 Assignment Data Files/Mushroom/agaricus-lepiota-uci.data')
data <- read.csv('Mushroom/agaricus-lepiota-uci.data')
View(data)
data <- read.csv('Mushroom/agaricus-lepiota-uci.data', header=FALSE)
View(data)
data <- read.csv('Mushroom/agaricus-lepiota-uci.data', header=FALSE)
write.csv('Mushroom/agaricus-lepiota-uci.data1')
data <- read.csv('Mushroom/agaricus-lepiota-uci.data', header=FALSE)
write.csv('~/OneDrive - Indian School of Business/Github/ISB-Term3/DMG2/assignment/DMG-2 Assignment Data Files/Mushroom/agaricus-lepiota-uci.data1')
data <- read.csv('Mushroom/agaricus-lepiota-uci.data', header=FALSE)
write.csv(data, file='~/OneDrive - Indian School of Business/Github/ISB-Term3/DMG2/assignment/DMG-2 Assignment Data Files/Mushroom/agaricus-lepiota-uci.data1', row.names = FALE)
data <- read.csv('Mushroom/agaricus-lepiota-uci.data', header=FALSE)
write.csv(data, file='~/OneDrive - Indian School of Business/Github/ISB-Term3/DMG2/assignment/DMG-2 Assignment Data Files/Mushroom/agaricus-lepiota-uci.data1', row.names = FALSE)
